#!/usr/bin/env python

import rospy
from std_srvs.srv import Empty, Trigger, TriggerResponse
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from std_msgs.msg import Float32
from geometry_msgs.msg import Twist
from std_msgs.msg import String

class Draw(object):
    def __init__(self):
    
        # Initialize the node
        rospy.init_node('draw_arch')
        
        # Subscribe to pose topic 
        rospy.Subscriber('/set_pose', Pose, self.pose_callback)
        
        # Subscribe to draw_arch topic
        rospy.Subscriber('draw', Float32, self.draw_arch_callback)
        
        # Create publisher for cmd_vel topic
        self.pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        
        # Create service callback to pause_drawing
        rospy.Service('pause', Trigger, self.pause_callback)
        
        # Create service callback to resume_drawing
        rospy.Service('resume', Trigger, self.resume_callback)
        
        # Create handle to the reset service
        self.reset = rospy.ServiceProxy('/reset', Empty)

    def pose_callback(self, msg):
        self.current_angle = msg.theta

    def draw_arch_callback(self, msg):
        
        rospy.loginfo('Recieved draw request')
        
        # Reset turtlesim
        self.reset()
        self.current_angle = None
        
        # Initialize member variables
        self.allowed_to_draw = True
        requested_angle = msg.data
        
        # Wait for first published pose before drawing
        while self.current_angle == None:
            rospy.sleep(0.5)
        rospy.loginfo('Start drawing')
        
        while not rospy.is_shutdown() and not abs(requested_angle - self.current_angle) < 0.3:
        
            if not self.allowed_to_draw:
                continue
            
            twist_msg = Twist()
            twist_msg.linear.x = 1
            twist_msg.linear.y = 0
            twist_msg.linear.z = 0
            twist_msg.angular.x = 0
            twist_msg.angular.y = 0
            twist_msg.angular.z = 0.5

            rospy.sleep(0.5)
            self.pub.publish(twist_msg)
         
        rospy.loginfo('Finished drawing')
   
    def pause_callback(self, reqt):
        self.allowed_to_draw = False
        return TriggerResponse(True, 'paused')
   
    def resume_callback(self, req):
        self.allowed_to_draw = True
        return TriggerResponse(True, 'resumed')

   
if __name__ == '__main__':
    Draw()
    rospy.spin()
